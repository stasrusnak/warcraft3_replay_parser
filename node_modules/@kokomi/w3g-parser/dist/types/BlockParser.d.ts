import ByteBuffer from "bytebuffer";
import { StatStringData } from "./MetadataParser.js";
export declare type AvailableRecord = GameRecord | PlayerRecord | StartRecord | ReplayFirstStartRecord | ReplaySecondStartRecord | ReplayThridStartRecord | ChatRecord | LeaveRecord | TimeSlotRecord | ReforgedPlayerMetadataRecord | ChecksumRecord;
export interface TimedRecord {
    time: number;
}
export interface RecordsResult {
    gameInfo?: GameRecord;
    startInfo?: StartRecord;
    players: PlayerRecord[];
    playerLeave: (LeaveRecord & TimedRecord)[];
    chatMessages: (ChatRecord & TimedRecord)[];
    actions: (TimeSlotRecord & TimedRecord)[];
    others: AvailableRecord[];
}
interface AbstractRecord {
    type: number;
}
export interface GameRecord extends AbstractRecord {
    type: 0x0;
    hostPlayer: PlayerInfo;
    gameName: string;
    statStringRaw: Uint8Array;
    statString: StatStringData;
    playersCount: number;
    gameType: number;
    languageId: number;
}
export interface TimeSlotRecord extends AbstractRecord {
    type: 0x1f | 0x1e;
    timeIncrement: number;
    rawData: Uint8Array;
}
export interface LeaveRecord extends AbstractRecord {
    type: 0x17;
    reason: number;
    playerId: number;
    result: number;
    unknown: number;
}
export interface PlayerRecord extends AbstractRecord, PlayerInfo {
    type: 0x16;
    unknown: number;
}
export interface ReforgedPlayerMetadataRecord extends AbstractRecord {
    type: 0x39;
    subType: number;
    rawData: Uint8Array;
}
export interface ChecksumRecord extends AbstractRecord {
    type: 0x22;
    checksum: number;
}
export interface ChatRecord extends AbstractRecord {
    type: 0x20;
    playerId: number;
    flags: number;
    chatMode?: number;
    message: string;
}
export interface ReplayFirstStartRecord extends AbstractRecord {
    type: 0x1a;
    unknown: number;
}
export interface ReplaySecondStartRecord extends AbstractRecord {
    type: 0x1b;
    unknown: number;
}
export interface ReplayThridStartRecord extends AbstractRecord {
    type: 0x1c;
    unknown: number;
}
export interface StartRecord extends AbstractRecord {
    type: 0x19;
    slots: SlotInfo[];
    randomSeed: number;
    gameMode: number;
    startSpotCount: number;
}
export interface PlayerInfo {
    playerId: number;
    playerName: string;
    runtimeOfPlayers?: number;
    race?: number;
}
export interface SlotInfo {
    playerId: number;
    downloadStatus: number;
    slotStatus: number;
    computer: number;
    team: number;
    color: number;
    race: number;
    computerType: number;
    handicap: number;
}
export declare class BlockParser {
    parseBlocks(bb: ByteBuffer, blockCount: number, isReforged: boolean): RecordsResult;
}
export {};
