"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActionParser = exports.processSaveGame = void 0;
const bytebuffer_1 = __importDefault(require("bytebuffer"));
const processPauseGame = (bb) => {
    return {
        type: 0x01,
    };
};
const processResumeGame = (bb) => {
    return {
        type: 0x02,
    };
};
const processSetGameSpeed = (bb) => {
    return {
        type: 0x03,
        speed: bb.readUint8(),
    };
};
const processIncreaseSpeed = (bb) => {
    return {
        type: 0x04,
    };
};
const processDecreaseSpeed = (bb) => {
    return {
        type: 0x05,
    };
};
const processSaveGame = (bb) => {
    return {
        type: 0x06,
        fileName: bb.readCString(),
    };
};
exports.processSaveGame = processSaveGame;
const processSaveGameFinished = (bb) => {
    return {
        type: 0x07,
        unknown: bb.readUint32(),
    };
};
const processAbilityAction = (bb) => {
    return {
        type: 0x10,
        flags: bb.readUint16(),
        itemId: bb.readUint32(),
        unknownA: bb.readUint32(),
        unknownB: bb.readUint32(),
    };
};
const processPositionAbilityAction = (bb) => {
    return {
        type: 0x11,
        flags: bb.readUint16(),
        itemId: bb.readUint32(),
        unknownA: bb.readUint32(),
        unknownB: bb.readUint32(),
        x: bb.readUint32(),
        y: bb.readUint32(),
    };
};
const processPositionAndObjectAbilityAction = (bb) => {
    return {
        type: 0x12,
        flags: bb.readUint16(),
        itemId: bb.readUint32(),
        unknownA: bb.readUint32(),
        unknownB: bb.readUint32(),
        targetX: bb.readUint32(),
        targetY: bb.readUint32(),
        objectId1: bb.readUint32(),
        objectId2: bb.readUint32(),
    };
};
const processItemAction = (bb) => {
    return {
        type: 0x13,
        flags: bb.readUint16(),
        itemId: bb.readUint32(),
        unknownA: bb.readUint32(),
        unknownB: bb.readUint32(),
        targetX: bb.readUint32(),
        targetY: bb.readUint32(),
        objectId1: bb.readUint32(),
        objectId2: bb.readUint32(),
        itemObjectId1: bb.readUint32(),
        itemObjectId2: bb.readUint32(),
    };
};
const processAbilityTwoTargetTwoItemAction = (bb) => {
    return {
        type: 0x14,
        flags: bb.readUint16(),
        itemIdA: bb.readUint32(),
        unknownA: bb.readUint32(),
        unknownB: bb.readUint32(),
        targetAX: bb.readUint32(),
        targetAY: bb.readUint32(),
        itemIdB: bb.readUint32(),
        unknownC: bb.readBytes(9).toBuffer(true),
        targetBX: bb.readUint32(),
        targetBY: bb.readUint32(),
    };
};
const processChangeSelection = (bb) => {
    const mode = bb.readUint8();
    const count = bb.readUint16();
    const objects = [];
    for (let i = 0; i < count; ++i) {
        objects.push({
            objectId1: bb.readUint32(),
            objectId2: bb.readUint32(),
        });
    }
    return {
        type: 0x16,
        mode,
        objects,
    };
};
const processAssignGroupHotkey = (bb) => {
    const group = bb.readUint8();
    const count = bb.readUint16();
    const objects = [];
    for (let i = 0; i < count; ++i) {
        objects.push({
            objectId1: bb.readUint32(),
            objectId2: bb.readUint32(),
        });
    }
    return {
        type: 0x17,
        group,
        objects,
    };
};
const processSelectGroupHotkey = (bb) => {
    return {
        type: 0x18,
        group: bb.readUint8(),
        unknown: bb.readUint8(),
    };
};
const processSelectSubGroup = (bb) => {
    return {
        type: 0x19,
        itemId: bb.readUint32(),
        objectId1: bb.readUint32(),
        objectId2: bb.readUint32(),
    };
};
const processPreSubselection = (bb) => {
    return {
        type: 0x1a,
    };
};
const processUnknown1B = (bb) => {
    return {
        type: 0x1b,
        unknownA: bb.readUint8(),
        unknownB: bb.readUint32(),
        unknownC: bb.readUint32(),
    };
};
const processSelectGroudItem = (bb) => {
    return {
        type: 0x1c,
        unknownA: bb.readUint8(),
        objectId1: bb.readUint32(),
        objectId2: bb.readUint32(),
    };
};
const processCancelHeroRevival = (bb) => {
    return {
        type: 0x1d,
        unitId1: bb.readUint32(),
        unitId2: bb.readUint32(),
    };
};
const processRemoveQueuedUnit = (bb) => {
    return {
        type: 0x1e,
        slot: bb.readUint8(),
        itemId: bb.readUint32(),
    };
};
const processUnknown21 = (bb) => {
    return {
        type: 0x21,
        unknownA: bb.readUint32(),
        unknownB: bb.readUint32(),
    };
};
const processSinglePlayerChat = (bb) => {
    const actionId = bb.readUint8(bb.offset - 1);
    switch (actionId) {
        case 0x27:
        case 0x28:
        case 0x2d:
            return {
                type: actionId,
                unknown: bb.readUint8(),
                count: bb.readInt32(),
            };
        case 0x2e:
            return {
                type: 0x2e,
                time: bb.readFloat32(),
            };
        case 0x20:
        case 0x22:
        case 0x23:
        case 0x24:
        case 0x25:
        case 0x26:
        case 0x2a:
        case 0x2b:
        case 0x2c:
        case 0x2f:
        case 0x30:
        case 0x31:
        case 0x32:
            return {
                type: actionId,
            };
    }
    throw new Error("Unknown cheat " + actionId);
};
const processAllyOptions = (bb) => {
    return {
        type: 0x50,
        slotId: bb.readUint8(),
        flags: bb.readUint32(),
    };
};
const processResourceTransferData = (bb) => {
    return {
        type: 0x51,
        slotId: bb.readUint8(),
        gold: bb.readUint32(),
        lumber: bb.readUint32(),
    };
};
const processChatCommand = (bb) => {
    return {
        type: 0x60,
        unknownA: bb.readUint32(),
        unknownB: bb.readUint32(),
        command: bb.readCString(),
    };
};
const processESCKeyEvent = (bb) => {
    return {
        type: 0x61,
    };
};
const processUnknown62 = (bb) => {
    return {
        type: 0x62,
        unknownA: bb.readUint32(),
        unknownB: bb.readUint32(),
        unknownC: bb.readUint32(),
    };
};
const processOpenSkillSubmenu = (bb) => {
    return {
        type: 0x65,
    };
};
const processOpenBuildSubmenu = (bb) => {
    return {
        type: 0x66,
    };
};
const processMinimapPing = (bb) => {
    return {
        type: 0x68,
        x: bb.readUint32(),
        y: bb.readUint32(),
        unknown: bb.readUint32(),
    };
};
const processUnknown69 = (bb) => {
    return {
        type: 0x69,
        unknownC: bb.readUint32(),
        unknownD: bb.readUint32(),
        unknownA: bb.readUint32(),
        unknownB: bb.readUint32(),
    };
};
const processUnknown6A = (bb) => {
    return {
        type: 0x6a,
        unknownA: bb.readUint32(),
        unknownB: bb.readUint32(),
        unknownC: bb.readUint32(),
        unknownD: bb.readUint32(),
    };
};
const processSyncInteger = (bb) => {
    return {
        type: 0x6b,
        filename: bb.readCString(),
        missionKey: bb.readCString(),
        key: bb.readCString(),
        value: bb.readUint32(),
    };
};
const processArrowKeyAction = (bb) => {
    return {
        type: 0x75,
        arrowKey: bb.readUint8(),
    };
};
const DEFAULT_ACTION_HANDLERS = {
    0x1: processPauseGame,
    0x2: processResumeGame,
    0x3: processSetGameSpeed,
    0x4: processIncreaseSpeed,
    0x5: processDecreaseSpeed,
    0x6: exports.processSaveGame,
    0x7: processSaveGameFinished,
    0x10: processAbilityAction,
    0x11: processPositionAbilityAction,
    0x12: processPositionAndObjectAbilityAction,
    0x13: processItemAction,
    0x14: processAbilityTwoTargetTwoItemAction,
    0x16: processChangeSelection,
    0x17: processAssignGroupHotkey,
    0x18: processSelectGroupHotkey,
    0x19: processSelectSubGroup,
    0x1a: processPreSubselection,
    0x1b: processUnknown1B,
    0x1c: processSelectGroudItem,
    0x1d: processCancelHeroRevival,
    0x1e: processRemoveQueuedUnit,
    0x20: processSinglePlayerChat,
    0x21: processUnknown21,
    0x22: processSinglePlayerChat,
    0x23: processSinglePlayerChat,
    0x24: processSinglePlayerChat,
    0x25: processSinglePlayerChat,
    0x26: processSinglePlayerChat,
    0x27: processSinglePlayerChat,
    0x28: processSinglePlayerChat,
    0x29: processSinglePlayerChat,
    0x2a: processSinglePlayerChat,
    0x2b: processSinglePlayerChat,
    0x2c: processSinglePlayerChat,
    0x2d: processSinglePlayerChat,
    0x2e: processSinglePlayerChat,
    0x30: processSinglePlayerChat,
    0x31: processSinglePlayerChat,
    0x32: processSinglePlayerChat,
    0x50: processAllyOptions,
    0x51: processResourceTransferData,
    0x60: processChatCommand,
    0x61: processESCKeyEvent,
    0x62: processUnknown62,
    0x66: processOpenSkillSubmenu,
    0x67: processOpenBuildSubmenu,
    0x68: processMinimapPing,
    0x69: processUnknown69,
    0x6a: processUnknown6A,
    0x6b: processSyncInteger,
    0x75: processArrowKeyAction,
};
class ActionParser {
    constructor(actionHandler) {
        this.processActionData = (data) => {
            const bb = bytebuffer_1.default.wrap(data, true);
            bb.limit = data.length;
            const actionBlocks = [];
            while (bb.remaining()) {
                const playerId = bb.readUint8();
                const actionsLength = bb.readUint16();
                const actions = [];
                const currentBlockEnd = bb.offset + actionsLength;
                while (bb.offset < currentBlockEnd) {
                    const actionId = bb.readUint8();
                    if (this.actionHandlers[actionId]) {
                        actions.push(this.actionHandlers[actionId](bb));
                    }
                    else
                        break;
                }
                const remaingBuffer = bb.slice(bb.offset, currentBlockEnd).toBuffer(true);
                bb.offset = currentBlockEnd;
                actionBlocks.push({
                    playerId,
                    actions,
                    remaingBuffer,
                });
            }
            return actionBlocks;
        };
        this.actionHandlers = Object.assign(Object.assign({}, DEFAULT_ACTION_HANDLERS), actionHandler);
    }
}
exports.ActionParser = ActionParser;
//# sourceMappingURL=ActionParser.js.map